
package client;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author kvnk1
 */
public class EditBook extends javax.swing.JInternalFrame {

    /** Creates new form EditBook */
    public EditBook() {
        initComponents();
        show_books();
        
    }
    public ArrayList<Book> bookList(){
        ArrayList<Book> booksList=new ArrayList<>();
            try{
                    Class.forName("oracle.jdbc.driver.OracleDriver");
                  Connection  con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","manager");
                     con=DB.getConnection();
                   Statement st=con.createStatement();
                ResultSet rs=st.executeQuery("select*from books");
                Book book;
                while(rs.next()){
                    book=new Book(rs.getString("id"),rs.getString("title"),rs.getString("isbn"),rs.getString("author"),rs.getString("publisher"),rs.getString("year"),rs.getString("edition"),rs.getInt("copies"),rs.getString("shelf"),rs.getString("available"));
                    booksList.add(book);
                    }
            }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
                }
            return booksList;
        }
    public void show_books(){
        ArrayList<Book> list= bookList();
        DefaultTableModel model = (DefaultTableModel) EditBookTable.getModel();
        Object[] row= new Object[10];
        for(int i=0;i<list.size();i++){
            row[0]=list.get(i).getid();
            row[1]=list.get(i).gettitle();
                row[2]=list.get(i).getisbn();
                row[3]=list.get(i).getauthor();
                row[4]=list.get(i).getpublisher();
                row[5]=list.get(i).getyear();
                row[6]=list.get(i).getedition();
                row[7]=list.get(i).getcopies();
                row[8]=list.get(i).getshelf();
                row[9]=list.get(i).getavailable();
                 model.addRow(row);
            }
        }
    public void executeSQLQuery(String query,String message){
        try{
        Connection  con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","manager");
         con=DB.getConnection();
        Statement st;
        
            st=con.createStatement();
            if(st.executeUpdate(query)==1){
                DefaultTableModel model = (DefaultTableModel) EditBookTable.getModel();
                model.setRowCount(0);
                show_books();
                JOptionPane.showMessageDialog(null, "Data "+message+"successfully");
            }else{
                    JOptionPane.showMessageDialog(null, "Data Not "+message);
                }
            } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new javax.swing.JScrollPane();
        EditBookTable = new javax.swing.JTable();
        ID = new javax.swing.JLabel();
        TITLE = new javax.swing.JLabel();
        ISBN = new javax.swing.JLabel();
        AUTHOR = new javax.swing.JLabel();
        PUBLISHER = new javax.swing.JLabel();
        YEAR = new javax.swing.JLabel();
        EDITION = new javax.swing.JLabel();
        COPIES = new javax.swing.JLabel();
        SHELF = new javax.swing.JLabel();
        AVAILABLE = new javax.swing.JLabel();
        INSERT = new javax.swing.JButton();
        UPDATE = new javax.swing.JButton();
        DELETE = new javax.swing.JButton();
        id = new javax.swing.JTextField();
        title = new javax.swing.JTextField();
        isbn = new javax.swing.JTextField();
        author = new javax.swing.JTextField();
        publisher = new javax.swing.JTextField();
        year = new javax.swing.JTextField();
        edition = new javax.swing.JTextField();
        copies = new javax.swing.JTextField();
        shelf = new javax.swing.JTextField();
        available = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Edit Book");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Edit24.gif"))); // NOI18N

        EditBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TITLE", "ISBN", "AUTHOR(S)", "PUBLISHER", "YEAR", "EDITION", "COPIES", "SHELF", "AVAILABLE"
            }
        ));
        EditBookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditBookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(EditBookTable);

        ID.setText("ID :");

        TITLE.setText("TITLE :");

        ISBN.setText("ISBN :");

        AUTHOR.setText("AUTHOR(S) :");

        PUBLISHER.setText("PUBLISHER :");

        YEAR.setText("YEAR :");

        EDITION.setText("EDITION :");

        COPIES.setText("COPIES :");

        SHELF.setText("SHELF :");

        AVAILABLE.setText("AVAILABLE :");

        INSERT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Add16.gif"))); // NOI18N
        INSERT.setText("INSERT");
        INSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                INSERTActionPerformed(evt);
            }
        });

        UPDATE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Edit16.gif"))); // NOI18N
        UPDATE.setText("UPDATE");
        UPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEActionPerformed(evt);
            }
        });

        DELETE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Delete16.gif"))); // NOI18N
        DELETE.setText("DELETE");
        DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ID)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(TITLE)
                                .addComponent(ISBN)))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title)
                            .addComponent(isbn)
                            .addComponent(id, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AUTHOR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(author))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PUBLISHER)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(publisher))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AVAILABLE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(available))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(INSERT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(UPDATE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DELETE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(YEAR)
                            .addComponent(EDITION)
                            .addComponent(COPIES)
                            .addComponent(SHELF))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(year)
                            .addComponent(edition)
                            .addComponent(copies)
                            .addComponent(shelf))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 941, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ID)
                                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(23, 23, 23)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(TITLE)
                                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(ISBN)
                                            .addComponent(isbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(AUTHOR)
                                            .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(PUBLISHER)
                                            .addComponent(publisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(36, 36, 36)
                                        .addComponent(YEAR))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(EDITION)
                                    .addComponent(edition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(COPIES)
                                    .addComponent(copies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(25, 25, 25)
                                .addComponent(SHELF))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(shelf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(AVAILABLE)
                            .addComponent(available, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(INSERT)
                            .addComponent(UPDATE)
                            .addComponent(DELETE))))
                .addGap(4, 4, 4))
        );

        pack();
    }//GEN-END:initComponents

    private void INSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_INSERTActionPerformed
String query="insert into books(id,title,isbn,author,publisher,year,edition,copies,shelf,available) values('"+id.getText()+"','"+title.getText()+"','"+isbn.getText()+"','"+author.getText()+"','"+publisher.getText()+"','"+year.getText()+"','"+edition.getText()+"','"+copies.getText()+"','"+shelf.getText()+"','"+available.getText()+"')";  
executeSQLQuery(query,"Inserted");
// TODO add your handling code here:
    }//GEN-LAST:event_INSERTActionPerformed

    private void EditBookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditBookTableMouseClicked
      int i=EditBookTable.getSelectedRow();
      TableModel model=EditBookTable.getModel();
      id.setText(model.getValueAt(i,0).toString());
    title.setText(model.getValueAt(i,1).toString());
        isbn.setText(model.getValueAt(i,2).toString());
        author.setText(model.getValueAt(i,3).toString());
        publisher.setText(model.getValueAt(i,4).toString());
        year.setText(model.getValueAt(i,5).toString());
        edition.setText(model.getValueAt(i,6).toString());
        copies.setText(model.getValueAt(i,7).toString());
        shelf.setText(model.getValueAt(i,8).toString());
        available.setText(model.getValueAt(i,9).toString());
      // TODO add your handling code here:
    }//GEN-LAST:event_EditBookTableMouseClicked

    private void UPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEActionPerformed
    String query="update books set title='"+title.getText()+"',isbn='"+isbn.getText()+"',author='"+author.getText()+"',publisher='"+publisher.getText()+"',year='"+year.getText()+"',edition='"+edition.getText()+"',copies='"+copies.getText()+"',shelf='"+shelf.getText()+"',available='"+available.getText()+"' where id="+id.getText();  
    executeSQLQuery(query," Updated ");        // TODO add your handling code here:
    }//GEN-LAST:event_UPDATEActionPerformed

    private void DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEActionPerformed
      String query="delete from books where id='"+id.getText()+"'";
       executeSQLQuery(query," Deleted ");   
       // TODO add your handling code here:
    }//GEN-LAST:event_DELETEActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AUTHOR;
    private javax.swing.JLabel AVAILABLE;
    private javax.swing.JLabel COPIES;
    private javax.swing.JButton DELETE;
    private javax.swing.JLabel EDITION;
    private javax.swing.JTable EditBookTable;
    private javax.swing.JLabel ID;
    private javax.swing.JButton INSERT;
    private javax.swing.JLabel ISBN;
    private javax.swing.JLabel PUBLISHER;
    private javax.swing.JLabel SHELF;
    private javax.swing.JLabel TITLE;
    private javax.swing.JButton UPDATE;
    private javax.swing.JLabel YEAR;
    private javax.swing.JTextField author;
    private javax.swing.JTextField available;
    private javax.swing.JTextField copies;
    private javax.swing.JTextField edition;
    private javax.swing.JTextField id;
    private javax.swing.JTextField isbn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField publisher;
    private javax.swing.JTextField shelf;
    private javax.swing.JTextField title;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables

}
